"type"¦"qualified name"¦"description"
"procedure"¦"apoc.index.addAllNodes"¦"apoc.index.addAllNodes('name',{label1:['prop1',...],...}, {options}) YIELD type, name, config - create a free text search index"
"procedure"¦"apoc.index.addAllNodesExtended"¦"apoc.index.addAllNodesExtended('name',{label1:['prop1',...],...}, {options}) YIELD type, name, config - create a free text search index with special options"
"procedure"¦"apoc.index.search"¦"apoc.index.search('name', 'query') YIELD node, weight - search for nodes in the free text index matching the given query"
"procedure"¦"apoc.index.nodes"¦"apoc.index.nodes('Label','prop:value*') YIELD node - lucene query on node index with the given label name"
"procedure"¦"apoc.index.forNodes"¦"apoc.index.forNodes('name',{config}) YIELD type,name,config - gets or creates node index"
"procedure"¦"apoc.index.forRelationships"¦"apoc.index.forRelationships('name',{config}) YIELD type,name,config - gets or creates relationship index"
"procedure"¦"apoc.index.remove"¦"apoc.index.remove('name') YIELD type,name,config - removes an manual index"
"procedure"¦"apoc.index.list"¦"apoc.index.list() - YIELD type,name,config - lists all manual indexes"
"procedure"¦"apoc.index.relationships"¦"apoc.index.relationships('TYPE','prop:value*') YIELD rel - lucene query on relationship index with the given type name"
"procedure"¦"apoc.index.between"¦"apoc.index.between(node1,'TYPE',node2,'prop:value*') YIELD rel - lucene query on relationship index with the given type name bound by either or both sides (each node parameter can be null)"
"procedure"¦"apoc.index.out"¦"apoc.index.out(node,'TYPE','prop:value*') YIELD node - lucene query on relationship index with the given type name for *outgoing* relationship of the given node, *returns end-nodes*"
"procedure"¦"apoc.index.in"¦"apoc.index.in(node,'TYPE','prop:value*') YIELD node lucene query on relationship index with the given type name for *incoming* relationship of the given node, *returns start-nodes*"
"procedure"¦"apoc.index.addNode"¦"apoc.index.addNode(node,['prop1',...]) add node to an index for each label it has"
"procedure"¦"apoc.index.addNodeByLabel"¦"apoc.index.addNodeByLabel(node,'Label',['prop1',...]) add node to an index for the given label"
"procedure"¦"apoc.index.addNodeByName"¦"apoc.index.addNodeByName('name',node,['prop1',...]) add node to an index for the given name"
"procedure"¦"apoc.index.addRelationship"¦"apoc.index.addRelationship(rel,['prop1',...]) add relationship to an index for its type"
"procedure"¦"apoc.index.addRelationshipByName"¦"apoc.index.addRelationshipByName('name',rel,['prop1',...]) add relationship to an index for the given name"
"procedure"¦"apoc.index.removeNodeByName"¦"apoc.index.removeNodeByName('name',node) remove node from an index for the given name"
"procedure"¦"apoc.index.removeRelationshipByName"¦"apoc.index.removeRelationshipByName('name',rel) remove relationship from an index for the given name"
"procedure"¦"apoc.index.related"¦"apoc.index.relatedNodes([nodes],label,key,'<TYPE'/'TYPE>'/'TYPE',limit) yield node - schema range scan which keeps index order and adds limit and checks opposite node of relationship against the given set of nodes"
"procedure"¦"apoc.index.orderedRange"¦"apoc.index.orderedRange(label,key,min,max,sort-relevance,limit) yield node - schema range scan which keeps index order and adds limit, values can be null, boundaries are inclusive"
"procedure"¦"apoc.index.orderedByText"¦"apoc.index.orderedByText(label,key,operator,value,sort-relevance,limit) yield node - schema string search which keeps index order and adds limit, operator is 'STARTS WITH' or 'CONTAINS'"
"procedure"¦"apoc.schema.properties.distinct"¦"apoc.schema.properties.distinct(label, key) - quickly returns all distinct values for a given key"
