"type"¦"qualified name"¦"description"
"procedure"¦"apoc.refactor.extractNode"¦"apoc.refactor.extractNode([rel1,rel2,...], [labels],'OUT','IN') extract node from relationships"
"procedure"¦"apoc.refactor.collapseNode"¦"apoc.refactor.collapseNode([node1,node2],'TYPE') collapse node to relationship, node with one rel becomes self-relationship"
"procedure"¦"apoc.refactor.cloneNodes"¦"apoc.refactor.cloneNodes([node1,node2,...]) clone nodes with their labels and properties"
"procedure"¦"apoc.refactor.cloneNodesWithRelationships"¦"apoc.refactor.cloneNodesWithRelationships([node1,node2,...]) clone nodes with their labels, properties and relationships"
"procedure"¦"apoc.refactor.mergeNodes"¦"apoc.refactor.mergeNodes([node1,node2]) merge nodes onto first in list"
"procedure"¦"apoc.refactor.setType"¦"apoc.refactor.setType(rel, 'NEW-TYPE') change relationship-type"
"procedure"¦"apoc.refactor.to"¦"apoc.refactor.to(rel, endNode) redirect relationship to use new end-node"
"procedure"¦"apoc.refactor.invert"¦"apoc.refactor.invert(rel) inverts relationship direction"
"procedure"¦"apoc.refactor.from"¦"apoc.refactor.from(rel, startNode) redirect relationship to use new start-node"
"procedure"¦"apoc.refactor.normalizeAsBoolean"¦"apoc.refactor.normalizeAsBoolean(entity, propertyKey, true_values, false_values) normalize/convert a property to be boolean"
"procedure"¦"apoc.refactor.categorize"¦"apoc.refactor.categorize(sourceKey, type, outgoing, label, targetKey, copiedKeys, batchSize) turn each unique propertyKey into a category node and connect to it"
